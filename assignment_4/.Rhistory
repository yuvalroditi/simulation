N <- 1
f <- function(){
P <- a4q1(x, f.alpha, f.lambda, start, N)
P[1,1] == P[2,1]
}
p1 <- mean(replicate(1e5,f()))
p2 <- 1-mean(pmin(rexp(1e5)^(n*rexp(1e5)),1))
if (abs(p1-p2) > 0.01){
pass[1] <- FALSE
stop("The distribution of the transition time seems to be wrong")
}
# Checks transition time
n <- sample(1:5,1)
x <- rep(1,n)
f.alpha <- function(a) exp(1/a-a)/a^(n-1)
f.lambda <- function(l) exp(l*(n-1) + 1/l)*l
start <- c(1,1)
N <- 1
f <- function(){
P <- a4q1(x, f.alpha, f.lambda, start, N)
P[1,1] == P[2,1]
}
p1 <- mean(replicate(1e5,f()))
p2 <- 1-mean(pmin(rexp(1e5)^(n*rexp(1e5)),1))
if (abs(p1-p2) > 0.01){
pass[1] <- FALSE
stop("The distribution of the transition time seems to be wrong")
}
# Checks transition time
n <- sample(1:5,1)
x <- rep(1,n)
f.alpha <- function(a) exp(1/a-a)/a^(n-1)
f.lambda <- function(l) exp(l*(n-1) + 1/l)*l
start <- c(1,1)
N <- 1
f <- function(){
P <- a4q1(x, f.alpha, f.lambda, start, N)
P[1,1] == P[2,1]
}
p1 <- mean(replicate(1e5,f()))
p2 <- 1-mean(pmin(rexp(1e5)^(n*rexp(1e5)),1))
if (abs(p1-p2) > 0.01){
pass[1] <- FALSE
stop("The distribution of the transition time seems to be wrong")
}
# Checks transition time
n <- sample(1:5,1)
x <- rep(1,n)
f.alpha <- function(a) exp(1/a-a)/a^(n-1)
f.lambda <- function(l) exp(l*(n-1) + 1/l)*l
start <- c(1,1)
N <- 1
f <- function(){
P <- a4q1(x, f.alpha, f.lambda, start, N)
P[1,1] == P[2,1]
}
p1 <- mean(replicate(1e5,f()))
p2 <- 1-mean(pmin(rexp(1e5)^(n*rexp(1e5)),1))
if (abs(p1-p2) > 0.01){
pass[1] <- FALSE
stop("The distribution of the transition time seems to be wrong")
}
# Checks transition time
n <- sample(1:5,1)
x <- rep(1,n)
f.alpha <- function(a) exp(1/a-a)/a^(n-1)
f.lambda <- function(l) exp(l*(n-1) + 1/l)*l
start <- c(1,1)
N <- 1
f <- function(){
P <- a4q1(x, f.alpha, f.lambda, start, N)
P[1,1] == P[2,1]
}
p1 <- mean(replicate(1e5,f()))
p2 <- 1-mean(pmin(rexp(1e5)^(n*rexp(1e5)),1))
if (abs(p1-p2) > 0.01){
pass[1] <- FALSE
stop("The distribution of the transition time seems to be wrong")
}
# Checks transition time
n <- sample(1:5,1)
x <- rep(1,n)
f.alpha <- function(a) exp(1/a-a)/a^(n-1)
f.lambda <- function(l) exp(l*(n-1) + 1/l)*l
start <- c(1,1)
N <- 1
f <- function(){
P <- a4q1(x, f.alpha, f.lambda, start, N)
P[1,1] == P[2,1]
}
p1 <- mean(replicate(1e5,f()))
p2 <- 1-mean(pmin(rexp(1e5)^(n*rexp(1e5)),1))
if (abs(p1-p2) > 0.01){
pass[1] <- FALSE
stop("The distribution of the transition time seems to be wrong")
}
# Checks transition time
n <- sample(1:5,1)
x <- rep(1,n)
f.alpha <- function(a) exp(1/a-a)/a^(n-1)
f.lambda <- function(l) exp(l*(n-1) + 1/l)*l
start <- c(1,1)
N <- 1
f <- function(){
P <- a4q1(x, f.alpha, f.lambda, start, N)
P[1,1] == P[2,1]
}
p1 <- mean(replicate(1e5,f()))
p2 <- 1-mean(pmin(rexp(1e5)^(n*rexp(1e5)),1))
if (abs(p1-p2) > 0.01){
pass[1] <- FALSE
stop("The distribution of the transition time seems to be wrong")
}
# Checks transition time
n <- sample(1:5,1)
x <- rep(1,n)
f.alpha <- function(a) exp(1/a-a)/a^(n-1)
f.lambda <- function(l) exp(l*(n-1) + 1/l)*l
start <- c(1,1)
N <- 1
f <- function(){
P <- a4q1(x, f.alpha, f.lambda, start, N)
P[1,1] == P[2,1]
}
p1 <- mean(replicate(1e5,f()))
p2 <- 1-mean(pmin(rexp(1e5)^(n*rexp(1e5)),1))
if (abs(p1-p2) > 0.01){
pass[1] <- FALSE
stop("The distribution of the transition time seems to be wrong")
}
########################
# Testing Assignment 4 #
########################
rm(list=ls())
# RUN THIS CODE IN THE SAME DIRECTORY WHERE YOUR FILE IS LOCATED
# REPLACE THE NAME TO THE NAME OF YOUR FILE
file_name <- "311306435_Assignment_4.R"
setwd("/Users/Yuval-PC/Desktop/simulation/simulation/assignment_4")
####################################
# Uploading the required libraries.
# Make sure to have them installed.
require(stringr)
require("microbenchmark")
pass <- rep(TRUE,3)
names(pass) <- paste("a4q",1:3, sep = "")
# Check that the code does not contain "library" nor "require"
strings_not_allowed <- c("library", "require")
script <- paste(scan(file_name, what = "a"), collapse = "")
if (any(str_detect(script, strings_not_allowed))){
pass[1:3] <- rep(FALSE,3)
stop(paste("Your code contains a disallowed string: ",
paste(strings_not_allowed, collapse = ", ")))
}
source(file_name)
# Q1
# Checks that the code for "a4q1" produces a numeric vector
# of length equal to the length of x
x <- rweibull(100,1,2)
f.alpha <- function(x) dgamma(x,1,1)
f.lambda <- function(x) dgamma(x,1,2)
start <- c(2,1)
N <- 100
S <- a4q1(x, f.alpha, f.lambda, start, N)
if(!is.matrix(S) | (nrow(S) != N+1) | (ncol(S) != 2)){
pass[1] <- FALSE
stop("a4q1 does not produce a numeric matrix of the required dimensions")
}
if(any(S[1,] != start)){
pass[1] <- FALSE
stop("The first row should contain the starting values")
}
# Check running time
x1 <- rweibull(1e3,1,2)
N0 <- 10
assess <- microbenchmark(a4q1(x, f.alpha, f.lambda, start, N0),
a4q1(x1, f.alpha, f.lambda, start, N0),
a4q1(x, f.alpha, f.lambda, start, N))
med_time <- summary(assess)[,"median"]
if ((med_time[2] > 20*med_time[1]) | (med_time[3] > 20*med_time[1])){
pass[1] <- FALSE
stop("The a4q1 function is not efficient enough")
}
# Checks transition time
n <- sample(1:5,1)
x <- rep(1,n)
f.alpha <- function(a) exp(1/a-a)/a^(n-1)
f.lambda <- function(l) exp(l*(n-1) + 1/l)*l
start <- c(1,1)
N <- 1
f <- function(){
P <- a4q1(x, f.alpha, f.lambda, start, N)
P[1,1] == P[2,1]
}
p1 <- mean(replicate(1e5,f()))
p2 <- 1-mean(pmin(rexp(1e5)^(n*rexp(1e5)),1))
if (abs(p1-p2) > 0.01){
pass[1] <- FALSE
stop("The distribution of the transition time seems to be wrong")
}
rexp(10000,1/3)
mean(rexp(10000,1/3))
########################
# Testing Assignment 4 #
########################
rm(list=ls())
# RUN THIS CODE IN THE SAME DIRECTORY WHERE YOUR FILE IS LOCATED
# REPLACE THE NAME TO THE NAME OF YOUR FILE
file_name <- "311306435_Assignment_4.R"
setwd("/Users/Yuval-PC/Desktop/simulation/simulation/assignment_4")
####################################
# Uploading the required libraries.
# Make sure to have them installed.
require(stringr)
require("microbenchmark")
pass <- rep(TRUE,3)
names(pass) <- paste("a4q",1:3, sep = "")
# Check that the code does not contain "library" nor "require"
strings_not_allowed <- c("library", "require")
script <- paste(scan(file_name, what = "a"), collapse = "")
if (any(str_detect(script, strings_not_allowed))){
pass[1:3] <- rep(FALSE,3)
stop(paste("Your code contains a disallowed string: ",
paste(strings_not_allowed, collapse = ", ")))
}
source(file_name)
# Q1
# Checks that the code for "a4q1" produces a numeric vector
# of length equal to the length of x
x <- rweibull(100,1,2)
f.alpha <- function(x) dgamma(x,1,1)
f.lambda <- function(x) dgamma(x,1,2)
start <- c(2,1)
N <- 100
S <- a4q1(x, f.alpha, f.lambda, start, N)
if(!is.matrix(S) | (nrow(S) != N+1) | (ncol(S) != 2)){
pass[1] <- FALSE
stop("a4q1 does not produce a numeric matrix of the required dimensions")
}
if(any(S[1,] != start)){
pass[1] <- FALSE
stop("The first row should contain the starting values")
}
# Check running time
x1 <- rweibull(1e3,1,2)
N0 <- 10
assess <- microbenchmark(a4q1(x, f.alpha, f.lambda, start, N0),
a4q1(x1, f.alpha, f.lambda, start, N0),
a4q1(x, f.alpha, f.lambda, start, N))
med_time <- summary(assess)[,"median"]
if ((med_time[2] > 20*med_time[1]) | (med_time[3] > 20*med_time[1])){
pass[1] <- FALSE
stop("The a4q1 function is not efficient enough")
}
# Checks transition time
n <- sample(1:5,1)
x <- rep(1,n)
f.alpha <- function(a) exp(1/a-a)/a^(n-1)
f.lambda <- function(l) exp(l*(n-1) + 1/l)*l
start <- c(1,1)
N <- 1
f <- function(){
P <- a4q1(x, f.alpha, f.lambda, start, N)
P[1,1] == P[2,1]
}
p1 <- mean(replicate(1e5,f()))
p2 <- 1-mean(pmin(rexp(1e5)^(n*rexp(1e5)),1))
if (abs(p1-p2) > 0.01){
pass[1] <- FALSE
stop("The distribution of the transition time seems to be wrong")
}
rexp(100, 1/2)
rexp(100, 1/2)>0
sum(rexp(100, 1/2)>0)
sum(rexp(10000, 1/2)>0)
########################
# Testing Assignment 4 #
########################
rm(list=ls())
# RUN THIS CODE IN THE SAME DIRECTORY WHERE YOUR FILE IS LOCATED
# REPLACE THE NAME TO THE NAME OF YOUR FILE
file_name <- "311306435_Assignment_4.R"
setwd("/Users/Yuval-PC/Desktop/simulation/simulation/assignment_4")
####################################
# Uploading the required libraries.
# Make sure to have them installed.
require(stringr)
require("microbenchmark")
pass <- rep(TRUE,3)
names(pass) <- paste("a4q",1:3, sep = "")
# Check that the code does not contain "library" nor "require"
strings_not_allowed <- c("library", "require")
script <- paste(scan(file_name, what = "a"), collapse = "")
if (any(str_detect(script, strings_not_allowed))){
pass[1:3] <- rep(FALSE,3)
stop(paste("Your code contains a disallowed string: ",
paste(strings_not_allowed, collapse = ", ")))
}
source(file_name)
# Q1
# Checks that the code for "a4q1" produces a numeric vector
# of length equal to the length of x
x <- rweibull(100,1,2)
f.alpha <- function(x) dgamma(x,1,1)
f.lambda <- function(x) dgamma(x,1,2)
start <- c(2,1)
N <- 100
S <- a4q1(x, f.alpha, f.lambda, start, N)
if(!is.matrix(S) | (nrow(S) != N+1) | (ncol(S) != 2)){
pass[1] <- FALSE
stop("a4q1 does not produce a numeric matrix of the required dimensions")
}
if(any(S[1,] != start)){
pass[1] <- FALSE
stop("The first row should contain the starting values")
}
# Check running time
x1 <- rweibull(1e3,1,2)
N0 <- 10
assess <- microbenchmark(a4q1(x, f.alpha, f.lambda, start, N0),
a4q1(x1, f.alpha, f.lambda, start, N0),
a4q1(x, f.alpha, f.lambda, start, N))
med_time <- summary(assess)[,"median"]
if ((med_time[2] > 20*med_time[1]) | (med_time[3] > 20*med_time[1])){
pass[1] <- FALSE
stop("The a4q1 function is not efficient enough")
}
########################
# Testing Assignment 4 #
########################
rm(list=ls())
# RUN THIS CODE IN THE SAME DIRECTORY WHERE YOUR FILE IS LOCATED
# REPLACE THE NAME TO THE NAME OF YOUR FILE
file_name <- "311306435_Assignment_4.R"
setwd("/Users/Yuval-PC/Desktop/simulation/simulation/assignment_4")
####################################
# Uploading the required libraries.
# Make sure to have them installed.
require(stringr)
require("microbenchmark")
pass <- rep(TRUE,3)
names(pass) <- paste("a4q",1:3, sep = "")
strings_not_allowed <- c("library", "require")
script <- paste(scan(file_name, what = "a"), collapse = "")
if (any(str_detect(script, strings_not_allowed))){
pass[1:3] <- rep(FALSE,3)
stop(paste("Your code contains a disallowed string: ",
paste(strings_not_allowed, collapse = ", ")))
}
source(file_name)
# Q1
# Checks that the code for "a4q1" produces a numeric vector
# of length equal to the length of x
x <- rweibull(100,1,2)
f.alpha <- function(x) dgamma(x,1,1)
f.lambda <- function(x) dgamma(x,1,2)
start <- c(2,1)
N <- 100
S <- a4q1(x, f.alpha, f.lambda, start, N)
########################
# Testing Assignment 4 #
########################
rm(list=ls())
# RUN THIS CODE IN THE SAME DIRECTORY WHERE YOUR FILE IS LOCATED
# REPLACE THE NAME TO THE NAME OF YOUR FILE
file_name <- "311306435_Assignment_4.R"
setwd("/Users/Yuval-PC/Desktop/simulation/simulation/assignment_4")
####################################
# Uploading the required libraries.
# Make sure to have them installed.
require(stringr)
require("microbenchmark")
pass <- rep(TRUE,3)
names(pass) <- paste("a4q",1:3, sep = "")
# Check that the code does not contain "library" nor "require"
strings_not_allowed <- c("library", "require")
script <- paste(scan(file_name, what = "a"), collapse = "")
if (any(str_detect(script, strings_not_allowed))){
pass[1:3] <- rep(FALSE,3)
stop(paste("Your code contains a disallowed string: ",
paste(strings_not_allowed, collapse = ", ")))
}
source(file_name)
# Q1
# Checks that the code for "a4q1" produces a numeric vector
# of length equal to the length of x
x <- rweibull(100,1,2)
f.alpha <- function(x) dgamma(x,1,1)
f.lambda <- function(x) dgamma(x,1,2)
start <- c(2,1)
N <- 100
S <- a4q1(x, f.alpha, f.lambda, start, N)
########################
# Testing Assignment 4 #
########################
rm(list=ls())
# RUN THIS CODE IN THE SAME DIRECTORY WHERE YOUR FILE IS LOCATED
# REPLACE THE NAME TO THE NAME OF YOUR FILE
file_name <- "311306435_Assignment_4.R"
setwd("/Users/Yuval-PC/Desktop/simulation/simulation/assignment_4")
####################################
# Uploading the required libraries.
# Make sure to have them installed.
require(stringr)
require("microbenchmark")
pass <- rep(TRUE,3)
names(pass) <- paste("a4q",1:3, sep = "")
# Check that the code does not contain "library" nor "require"
strings_not_allowed <- c("library", "require")
script <- paste(scan(file_name, what = "a"), collapse = "")
if (any(str_detect(script, strings_not_allowed))){
pass[1:3] <- rep(FALSE,3)
stop(paste("Your code contains a disallowed string: ",
paste(strings_not_allowed, collapse = ", ")))
}
source(file_name)
# Q1
# Checks that the code for "a4q1" produces a numeric vector
# of length equal to the length of x
x <- rweibull(100,1,2)
f.alpha <- function(x) dgamma(x,1,1)
f.lambda <- function(x) dgamma(x,1,2)
start <- c(2,1)
N <- 100
S <- a4q1(x, f.alpha, f.lambda, start, N)
if(!is.matrix(S) | (nrow(S) != N+1) | (ncol(S) != 2)){
pass[1] <- FALSE
stop("a4q1 does not produce a numeric matrix of the required dimensions")
}
if(any(S[1,] != start)){
pass[1] <- FALSE
stop("The first row should contain the starting values")
}
# Check running time
x1 <- rweibull(1e3,1,2)
N0 <- 10
assess <- microbenchmark(a4q1(x, f.alpha, f.lambda, start, N0),
a4q1(x1, f.alpha, f.lambda, start, N0),
a4q1(x, f.alpha, f.lambda, start, N))
med_time <- summary(assess)[,"median"]
if ((med_time[2] > 20*med_time[1]) | (med_time[3] > 20*med_time[1])){
pass[1] <- FALSE
stop("The a4q1 function is not efficient enough")
}
########################
# Testing Assignment 4 #
########################
rm(list=ls())
# RUN THIS CODE IN THE SAME DIRECTORY WHERE YOUR FILE IS LOCATED
# REPLACE THE NAME TO THE NAME OF YOUR FILE
file_name <- "311306435_Assignment_4.R"
setwd("/Users/Yuval-PC/Desktop/simulation/simulation/assignment_4")
####################################
# Uploading the required libraries.
# Make sure to have them installed.
require(stringr)
require("microbenchmark")
pass <- rep(TRUE,3)
names(pass) <- paste("a4q",1:3, sep = "")
# Check that the code does not contain "library" nor "require"
strings_not_allowed <- c("library", "require")
script <- paste(scan(file_name, what = "a"), collapse = "")
if (any(str_detect(script, strings_not_allowed))){
pass[1:3] <- rep(FALSE,3)
stop(paste("Your code contains a disallowed string: ",
paste(strings_not_allowed, collapse = ", ")))
}
source(file_name)
# Q1
# Checks that the code for "a4q1" produces a numeric vector
# of length equal to the length of x
x <- rweibull(100,1,2)
f.alpha <- function(x) dgamma(x,1,1)
f.lambda <- function(x) dgamma(x,1,2)
start <- c(2,1)
N <- 100
S <- a4q1(x, f.alpha, f.lambda, start, N)
if(!is.matrix(S) | (nrow(S) != N+1) | (ncol(S) != 2)){
pass[1] <- FALSE
stop("a4q1 does not produce a numeric matrix of the required dimensions")
}
if(any(S[1,] != start)){
pass[1] <- FALSE
stop("The first row should contain the starting values")
}
# Check running time
x1 <- rweibull(1e3,1,2)
N0 <- 10
assess <- microbenchmark(a4q1(x, f.alpha, f.lambda, start, N0),
a4q1(x1, f.alpha, f.lambda, start, N0),
a4q1(x, f.alpha, f.lambda, start, N))
med_time <- summary(assess)[,"median"]
if ((med_time[2] > 20*med_time[1]) | (med_time[3] > 20*med_time[1])){
pass[1] <- FALSE
stop("The a4q1 function is not efficient enough")
}
# Checks transition time
n <- sample(1:5,1)
x <- rep(1,n)
f.alpha <- function(a) exp(1/a-a)/a^(n-1)
f.lambda <- function(l) exp(l*(n-1) + 1/l)*l
start <- c(1,1)
N <- 1
f <- function(){
P <- a4q1(x, f.alpha, f.lambda, start, N)
P[1,1] == P[2,1]
}
p1 <- mean(replicate(1e5,f()))
p2 <- 1-mean(pmin(rexp(1e5)^(n*rexp(1e5)),1))
if (abs(p1-p2) > 0.01){
pass[1] <- FALSE
stop("The distribution of the transition time seems to be wrong")
}
